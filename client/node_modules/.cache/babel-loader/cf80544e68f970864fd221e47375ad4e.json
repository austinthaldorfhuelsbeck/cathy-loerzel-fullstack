{"ast":null,"code":"/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nexport const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5001\";\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\n\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({\n        message: payload.error\n      });\n    }\n\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n\n    return Promise.resolve(onCancel);\n  }\n}\n/**\n * Retrieves all existing blogs.\n * @returns {Promise<[blog]>}\n *  a promise that resolves to a possibly empty array of blog saved in the database.\n */\n\n\nexport async function listBlogs(params, signal) {\n  const url = new URL(`${API_BASE_URL}/blogs`);\n  Object.entries(params).forEach(([key, value]) => url.searchParams.append(key, value.toString()));\n  return await fetchJson(url, {\n    headers,\n    signal\n  }, []);\n}\n/**\n * Retrieves a single existing blog.\n * @returns {Promise<[blog]>}\n *  a promise that resolves to a blog saved in the database.\n */\n\nexport async function readBlog(id) {\n  const url = new URL(`${API_BASE_URL}/blogs/${id}`);\n  return await fetchJson(url, []);\n}\n/**\n * Retrieves all existing tables.\n * @returns {Promise<[blog]>}\n *  a promise that resolves to a possibly empty array of blog saved in the database.\n */\n// export async function listTables(signal) {\n//   const url = new URL(`${API_BASE_URL}/tables`)\n//   return await fetchJson(url, { signal }, [])\n// }","map":{"version":3,"sources":["/Users/dev/Documents/GitHub/cathy-loerzel/client/src/utils/api.js"],"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","headers","Headers","append","fetchJson","url","options","onCancel","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack","resolve","listBlogs","params","signal","URL","Object","entries","forEach","key","value","searchParams","toString","readBlog","id"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GACvBC,OAAO,CAACC,GAAR,CAAYC,sBAAZ,IAAsC,uBADjC;AAGP;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,IAAIC,OAAJ,EAAhB;AACAD,OAAO,CAACE,MAAR,CAAe,cAAf,EAA+B,kBAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,SAAf,CAAyBC,GAAzB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiD;AAC/C,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAMC,OAAN,CAA5B;;AAEA,QAAIE,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,UAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;;AAEA,QAAID,OAAO,CAACE,KAAZ,EAAmB;AACjB,aAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,QAAAA,OAAO,EAAEL,OAAO,CAACE;AAAnB,OAAf,CAAP;AACD;;AACD,WAAOF,OAAO,CAACM,IAAf;AACD,GAbD,CAaE,OAAOJ,KAAP,EAAc;AACd,QAAIA,KAAK,CAACK,IAAN,KAAe,YAAnB,EAAiC;AAC/BC,MAAAA,OAAO,CAACN,KAAR,CAAcA,KAAK,CAACO,KAApB;AACA,YAAMP,KAAN;AACD;;AACD,WAAOC,OAAO,CAACO,OAAR,CAAgBd,QAAhB,CAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAee,SAAf,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;AAC9C,QAAMnB,GAAG,GAAG,IAAIoB,GAAJ,CAAS,GAAE5B,YAAa,QAAxB,CAAZ;AACA6B,EAAAA,MAAM,CAACC,OAAP,CAAeJ,MAAf,EAAuBK,OAAvB,CAA+B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAC7BzB,GAAG,CAAC0B,YAAJ,CAAiB5B,MAAjB,CAAwB0B,GAAxB,EAA6BC,KAAK,CAACE,QAAN,EAA7B,CADF;AAGA,SAAO,MAAM5B,SAAS,CAACC,GAAD,EAAM;AAAEJ,IAAAA,OAAF;AAAWuB,IAAAA;AAAX,GAAN,EAA2B,EAA3B,CAAtB;AACD;AAED;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeS,QAAf,CAAwBC,EAAxB,EAA4B;AACjC,QAAM7B,GAAG,GAAG,IAAIoB,GAAJ,CAAS,GAAE5B,YAAa,UAASqC,EAAG,EAApC,CAAZ;AACA,SAAO,MAAM9B,SAAS,CAACC,GAAD,EAAM,EAAN,CAAtB;AACD;AAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nexport const API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || \"http://localhost:5001\"\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers()\nheaders.append(\"Content-Type\", \"application/json\")\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options)\n\n    if (response.status === 204) {\n      return null\n    }\n\n    const payload = await response.json()\n\n    if (payload.error) {\n      return Promise.reject({ message: payload.error })\n    }\n    return payload.data\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack)\n      throw error\n    }\n    return Promise.resolve(onCancel)\n  }\n}\n\n/**\n * Retrieves all existing blogs.\n * @returns {Promise<[blog]>}\n *  a promise that resolves to a possibly empty array of blog saved in the database.\n */\n\nexport async function listBlogs(params, signal) {\n  const url = new URL(`${API_BASE_URL}/blogs`)\n  Object.entries(params).forEach(([key, value]) =>\n    url.searchParams.append(key, value.toString())\n  )\n  return await fetchJson(url, { headers, signal }, [])\n}\n\n/**\n * Retrieves a single existing blog.\n * @returns {Promise<[blog]>}\n *  a promise that resolves to a blog saved in the database.\n */\n\nexport async function readBlog(id) {\n  const url = new URL(`${API_BASE_URL}/blogs/${id}`)\n  return await fetchJson(url, [])\n}\n\n/**\n * Retrieves all existing tables.\n * @returns {Promise<[blog]>}\n *  a promise that resolves to a possibly empty array of blog saved in the database.\n */\n\n// export async function listTables(signal) {\n//   const url = new URL(`${API_BASE_URL}/tables`)\n//   return await fetchJson(url, { signal }, [])\n// }\n"]},"metadata":{},"sourceType":"module"}